# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для
# конкретных значений необходимо запускать скрипт с параметрами.

file: calc_zp.py

def velcome():
    print("Ниже представлен расчет заработной платы Вашего сотрудника")

def calc():
    cal1 = int(input("Введите выработку в часах для Вашего сотрудника: "))
    cal2 = int(input("Введите ставку в часах для Вашего сотрудника: "))
    cal3 = int(input("Введите размер месячной премии Вашего сотрудника: "))
    return cal1 * cal2 + cal3

file: introduce_zp.py

import calc_zp.py
calc_zp.velcome()
print(calc_zp.calc())

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего
# элемента.

from random import randint
my_list = [randint(0,100) for i in range(20)]
print(f'Исходный список: {my_list}')
reuslt = [my_list[index] for index in range(1, len(my_list)) if my_list[index] > my_list[index-1]]
print(f'Новый список: {reuslt}')

# or

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
print(f'Исходный список: {my_list}')

i = 0
for i in range (1, len(my_list)):
    if my_list[i + 1] > my_list[i]:
        my_list.pop(i)
        break
    i += 2

    print(f'Новый список: {my_list}')


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.

result = [el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0]
print(result)

# 4.Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел,
# соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания
# обязательно используйте генератор

from random import randint
my_list = [randint(0,100) for i in range(20)]
print(f'Исходный список: {my_list}')
result = [el for el in my_list if my_list.count(el) == 1]
print(f'Cписок не повторяющихся элементов: {result}')
result2 = [el for el in my_list if my_list.count(el) != 1]
print(f'Cписок повторяющихся элементов: {result2}')

# 5.Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные
# числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

my_list = [el from el in range(100, 1001, 2)]
print(my_list)

result = reduce[lambda x,y: x*y, my_list]
print(result)


# 6.Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен
# быть бесконечным. Предусмотрите условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл. Вторым пунктом
# необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

from random import randint
my_list = [randint(3,10) for i in range(7)]
result = [el for el in my_list if my_list.count(el) == 1]
print(result)


